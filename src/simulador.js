const readline = require("readline");
const stringSimilarity = require("string-similarity");
const axios = require('axios');
const db = require('./db'); // Importa a conex√£o com o banco de dados
require('dotenv').config();

// Configura√ß√µes do simulador
const CONFIG = {
    SIMILARITY_THRESHOLD: 0.7,
    MAX_SUGGESTIONS: 3,
    RESTAURANTE_ENDERECO: "Pra√ßa da S√©, 250 - S√£o Paulo - SP",
};

// Chave da API Gemini armazenada no .env
const GEMINI_API_KEY = process.env.GEMINI_API_KEY;
const GEMINI_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${GEMINI_API_KEY}`;

// Fun√ß√£o para normalizar texto (remover acentos e caracteres especiais)
function normalizarTexto(texto) {
    return texto
        .normalize("NFD").replace(/[\u0300-\u036f]/g, "")
        .toLowerCase()
        .replace(/[^a-z0-9\s]/g, " ")
        .replace(/\s+/g, " ")
        .trim();
}

// Fun√ß√£o para encontrar itens no card√°pio com similaridade
async function encontrarItem(texto) {
    const result = await db.pool.query('SELECT * FROM cardapio');
    const cardapio = result.rows;

    let melhorMatch = { score: 0, item: null };
    for (const item of cardapio) {
        const termos = [item.nome];
        if (item.synonyms && typeof item.synonyms === "string") {
            termos.push(...item.synonyms.split(","));
        }

        for (const termo of termos) {
            const termoNormalizado = normalizarTexto(termo);
            const score = stringSimilarity.compareTwoStrings(normalizarTexto(texto), termoNormalizado);

            if (score > melhorMatch.score && score >= CONFIG.SIMILARITY_THRESHOLD) {
                melhorMatch = { score, item };
            }
        }
    }
    return melhorMatch.item;
}

// Fun√ß√£o para processar pedidos
async function processarPedido(pergunta) {
    const regexQuantidade = /(\d+)\s*(?:x|unidade|unidades|)\s*([a-z√°√©√≠√≥√∫√£√µ\s]+)/gi;
    const itens = [];
    let match;

    while ((match = regexQuantidade.exec(pergunta)) !== null) {
        const quantidade = parseInt(match[1]);
        const termoItem = match[2].trim();
        const item = await encontrarItem(termoItem);

        if (item) {
            itens.push({ ...item, quantidade });
        }
    }

    return itens;
}

// Fun√ß√£o para obter resposta do Gemini
async function getGeminiResponse(prompt) {
    try {
        const menuSample = await db.pool.query('SELECT * FROM cardapio LIMIT 10');
        const menuFormatted = menuSample.rows.map(item =>
            `${item.nome} - R$ ${(typeof item.preco === 'number' ? item.preco.toFixed(2) : '0.00')}`
        ).join('\n');

        const additionalInfo = `
            Nome da Lanchonete: Lanchonete Sabor do Dia.
            Hor√°rios: 10h - 22h.
            Localiza√ß√£o: Avenida Paulista, 1578, Bela Vista, S√£o Paulo, SP.Y
            Card√°pio (amostra):
            ${menuFormatted}

            - Responda de forma curta e objetiva (m√°ximo de 2 frases).
            - Seja educado e direto ao ponto.
            - Se for um pedido, confirme os itens e o valor total rapidamente.
        `;

        const fullPrompt = `${additionalInfo}\n\nUsu√°rio: ${prompt}`;

        const data = {
            contents: [{
                parts: [{ text: fullPrompt }]
            }]
        };

        const response = await axios.post(GEMINI_URL, data, {
            headers: { 'Content-Type': 'application/json' }
        });

        return response.data.candidates?.[0]?.content?.parts?.[0]?.text || "Erro ao processar resposta.";
    } catch (error) {
        return `Erro na requisi√ß√£o: ${error.message}`;
    }
}

// Fun√ß√£o principal para processar perguntas
let primeiraInteracao = true; // Vari√°vel global

async function processarPergunta(pergunta) {
    pergunta = normalizarTexto(pergunta);

    // Verifica se √© a primeira intera√ß√£o
    if (primeiraInteracao) {
        primeiraInteracao = false;
        return "üì≤ Voc√™ pode acessar nosso card√°pio virtual aqui: [Clique para ver](https://seu-site.com/cardapio)";
    }

    if (pergunta.includes("cardapio") || pergunta.includes("menu")) {
        return "üì≤ Voc√™ pode acessar nosso card√°pio virtual aqui: [Clique para ver](https://seu-site.com/cardapio)";
    }

    const itens = await processarPedido(pergunta);
    if (itens.length > 0) {
        const total = itens.reduce((sum, item) => sum + (item.preco * item.quantidade), 0);
        return `üõí Seu pedido:\n` +
            itens.map(i => `- ${i.quantidade}x ${i.nome} - R$${(i.preco * i.quantidade).toFixed(2)}`).join("\n") +
            `\nüí∞ Total: R$${total.toFixed(2)}`;
    }

    return await getGeminiResponse(pergunta);
}
// Fun√ß√£o para obter o √≠cone baseado no nome do item
///const stringSimilarity = require("string-similarity"); // Importa a biblioteca

// Fun√ß√£o para normalizar texto (remover acentos e caracteres especiais)
function normalizarTexto(texto) {
    return texto
        .normalize("NFD").replace(/[\u0300-\u036f]/g, "")
        .toLowerCase()
        .replace(/[^a-z0-9\s]/g, " ")
        .replace(/\s+/g, " ")
        .trim();
}

// Fun√ß√£o para obter o √≠cone baseado no nome do item
function obterIcone(nome) {
    const mapDeIcones = {
        "hamburguer": "üçî",
        "pizza": "üçï",
        "salada": "ü•ó",
        "sorvete": "üç¶",
        "refrigerante": "ü•§",
        "batata": "üçü",
        "sandu√≠che": "ü•™",
        "sopa": "üç≤",
        "fruta": "üçé",
        "bolo": "üç∞",
        "caf√©": "‚òï",
        "p√£o": "üçû",
        "queijo": "üßÄ",
        "carne": "üçñ",
        "frango": "üçó",
        "a√ßa√≠": "ü•£", // √çcone atualizado para a√ßa√≠ (apenas a tigela)
        "cachorro quente": "üå≠", // √çcone para cachorro quente
        "hot dog": "üå≠", // √çcone para hot dog
        "hotdog": "üå≠", // √çcone para hotdog
    };

    const nomeNormalizado = normalizarTexto(nome); // Normaliza o nome do item
    let melhorMatch = { score: 0, icone: "üçΩÔ∏è" }; // Inicializa com o √≠cone gen√©rico

    for (let key in mapDeIcones) {
        const termoNormalizado = normalizarTexto(key);
        const score = stringSimilarity.compareTwoStrings(nomeNormalizado, termoNormalizado);

        if (score > melhorMatch.score && score >= 0.5) { // Limiar de similaridade
            melhorMatch = { score, icone: mapDeIcones[key] };
        }
    }

    return melhorMatch.icone; // Retorna o √≠cone mais parecido
}
async function obterCardapio() {
    try {
        const result = await db.pool.query('SELECT nome, preco FROM cardapio');
        const cardapio = result.rows;

        console.log("Itens do card√°pio:", cardapio.map(i => i.nome)); // Debugging

        if (!cardapio || cardapio.length === 0) {
            return "üçΩÔ∏è *O card√°pio est√° vazio no momento.*";
        }

        const formattedCardapio = cardapio
            .map(i => {
                const preco = parseFloat(i.preco);
                const icone = obterIcone(i.nome); // Obt√©m o √≠cone baseado no nome do item

                if (isNaN(preco)) {
                    return `${icone} *${i.nome}* - Pre√ßo inv√°lido`;
                }
                return `${icone} *${i.nome}* - *R$ ${preco.toFixed(2)}**`;
            })
            .join("\n\n"); // Adiciona uma quebra de linha entre os itens

        return "üçΩÔ∏è **Nosso card√°pio**:\n\n" + formattedCardapio;
    } catch (error) {
        console.error("Erro ao buscar o card√°pio:", error);
        return "‚ö†Ô∏è **Erro ao carregar o card√°pio. Tente novamente mais tarde.**";
    }
}


// Configura√ß√£o do terminal
const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

// Iniciar chat no terminal
const LINK_CARDAPIO = "https://seusite.com/cardapio"; // Substitua pelo link real

// Fun√ß√£o para iniciar o chat
function iniciarChat() {
    console.log("ü§ñ Simulador de Chat iniciado! Digite sua pergunta ou 'sair' para encerrar:");

    rl.question("Voc√™: ", async (pergunta) => {
        // Se o usu√°rio digitar 'sair', o chat ser√° encerrado
        if (pergunta.toLowerCase() === 'sair') {
            console.log("Encerrando o programa.");
            rl.close();
            return;
        }

        // Se for a primeira intera√ß√£o, envia a mensagem de boas-vindas com o link do card√°pio
        if (pergunta.trim() === '') {
            const mensagemInicial = `üçΩÔ∏è Ol√°! Para fazer seu pedido, acesse nosso card√°pio virtual:\nüîó ${LINK_CARDAPIO}`;
            console.log("Bot:", mensagemInicial);
        } else {
            console.log("pergunta:",pergunta)
            // Caso contr√°rio, processa a pergunta do usu√°rio normalmente
            const resposta = await processarPergunta(pergunta);
            console.log("Bot:", resposta);
        }

        // Inicia uma nova rodada de perguntas
        iniciarChat();
    });
}

module.exports = { processarPergunta };
